generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dog {
  id                   String               @id @default(uuid())
  callName             String
  akcBreed             String
  sex                  DogSex
  birthdate            DateTime?
  birthplace           String?
  akcRegisteredName    String?
  akcTitlePrefix       String?
  akcTitleSuffix       String?
  akcRegistrationType  AkcRegistrationType?
  akcHeightCard        AkcHeightCard        @default(NONE)
  akcMeasuredHeight    Int?
  registrationNumber   String?
  breederName          String?
  sireName             String?
  damName              String?
  primaryOwnerId       String
  handler              String?
  isOfficiallyMeasured Boolean              @default(false)
  jumpHeight           Int?
  preferredClasses     Boolean              @default(false)
  scores               Run[]
  trialEntries         TrialEntry[]
  owners               User[]
}

model User {
  id                    String           @id @unique
  akcJudgeId            String?
  akcLicense            String?
  akcSecretaryId        String?
  city                  String
  email                 String
  emergencyContactName  String?
  emergencyContactPhone String?
  firstName             String
  lastName              String
  phone                 String?
  postalCode            String
  state                 State
  streetAddress         String
  trialsAsJudge         JudgesByTrials[]
  runs                  Run[]
  trialsAsSecretary     Trial[]
  trialEntries          TrialEntry[]
  dogs                  Dog[]
}

model Trial {
  id                         String                    @id @default(uuid())
  hostingClubId              String
  akcEventNumber             String
  venue                      String
  venueStreetAddress         String
  venueCity                  String
  venueState                 String
  venuePostalCode            String
  type                       String
  signUpOpenDatetime         DateTime
  signUpCloseDateTime        DateTime
  acceptanceMethod           AcceptanceMethod
  checksPayableTo            String?
  secretaryId                String
  trialChairmanName          String
  trialChairmanEmail         String
  trialChairmanStreetAddress String
  trialChairmanCity          String
  trialChairmanState         String
  trialChairmanPostalCode    String
  trialChairmanPhone         String?
  costFirstEntry             Int
  costSecondEntry            Int
  costThirdEntry             Int
  costFourthEntry            Int
  catalogFee                 Int
  juniorHandlerDiscount      Int?
  confirmationLetter         String
  hostingClub                Club                      @relation(fields: [hostingClubId], references: [id])
  secretary                  User                      @relation(fields: [secretaryId], references: [id])
  classesEntries             ClassEntriesByTrials[]
  classesAvailable           ClassTypeLevelsByTrials[]
  judges                     JudgesByTrials[]
  trialDays                  TrialDay[]
  trialEntries               TrialEntry[]
}

model JudgesByTrials {
  judgeId String
  trialId String
  judge   User   @relation(fields: [judgeId], references: [id])
  trial   Trial  @relation(fields: [trialId], references: [id])

  @@id([judgeId, trialId])
}

model TrialDay {
  id           String                    @id @default(uuid())
  trialId      String
  date         DateTime
  akcId        String
  entryLimit   Int
  mixedBreeds  Boolean
  trial        Trial                     @relation(fields: [trialId], references: [id])
  rings        Ring[]
  run          Run[]
  trialEntries TrialEntriesByTrialDays[]
}

model Ring {
  id         String   @id @default(uuid())
  trialDayId String
  trialDay   TrialDay @relation(fields: [trialDayId], references: [id])
}

model Club {
  id     String  @id @default(uuid())
  name   String
  trials Trial[]
}

model ClassType {
  id                      String                    @id @default(uuid())
  name                    String
  classTypesByLevel       ClassTypeByLevel[]
  classTypeLevelsByTrials ClassTypeLevelsByTrials[]
  runs                    Run[]
}

model ClassTypeLevelsByTrials {
  classId   String
  trialId   String
  classType ClassType @relation(fields: [classId], references: [id])
  trial     Trial     @relation(fields: [trialId], references: [id])

  @@id([classId, trialId])
}

model Level {
  id                String             @id @default(uuid())
  name              String
  classTypesByLevel ClassTypeByLevel[]
  runs              Run[]
}

model Height {
  id     String @id @default(uuid())
  height Int
  runs   Run[]
}

model ClassTypeByLevel {
  classId   String
  levelId   String
  classType ClassType @relation(fields: [classId], references: [id])
  level     Level     @relation(fields: [levelId], references: [id])

  @@id([classId, levelId])
}

model Run {
  id            String    @id @default(uuid())
  dogId         String
  scoreKeeperId String
  classTypeId   String
  levelId       String
  heightId      String
  trialDayId    String
  createdAt     DateTime  @default(now())
  classType     ClassType @relation(fields: [classTypeId], references: [id])
  dog           Dog       @relation(fields: [dogId], references: [id])
  height        Height    @relation(fields: [heightId], references: [id])
  level         Level     @relation(fields: [levelId], references: [id])
  scorekeeper   User      @relation(fields: [scoreKeeperId], references: [id])
  trialDay      TrialDay  @relation(fields: [trialDayId], references: [id])
}

model TrialEntry {
  id                String                    @id @default(uuid())
  dogId             String
  trialId           String
  userId            String
  juniorHandler     Boolean                   @default(false)
  isPreferred       Boolean                   @default(false)
  dog               Dog                       @relation(fields: [dogId], references: [id])
  trial             Trial                     @relation(fields: [trialId], references: [id])
  user              User                      @relation(fields: [userId], references: [id])
  classesEnteredIds ClassEntriesByTrials[]
  trialDays         TrialEntriesByTrialDays[]
}

model ClassEntriesByTrials {
  trialEntryId String
  trialId      String
  trialEntry   TrialEntry @relation(fields: [trialEntryId], references: [id])
  trial        Trial      @relation(fields: [trialId], references: [id])

  @@id([trialEntryId, trialId])
}

model TrialEntriesByTrialDays {
  trialEntryId String
  trialDayId   String
  trialDay     TrialDay   @relation(fields: [trialDayId], references: [id])
  trialEntry   TrialEntry @relation(fields: [trialEntryId], references: [id])

  @@id([trialEntryId, trialDayId])
}

enum AcceptanceMethod {
  RANDOMDRAW
  FIRSTRECEIVED
}

enum State {
  AL
  AK
  AS
  AZ
  AR
  CA
  CO
  CT
  DE
  DC
  FM
  FL
  GA
  GU
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MH
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  MP
  OH
  OK
  OR
  PW
  PA
  PR
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VI
  VA
  WA
  WV
  WI
  WY
}

enum DogSex {
  MALE
  FEMALE
}

enum AkcRegistrationType {
  AKCREGNUMBER
  AKCPALNUMBER
  FOREIGNREGNUMBER
}

enum AkcHeightCard {
  NONE
  TEMP
  PERM
}
